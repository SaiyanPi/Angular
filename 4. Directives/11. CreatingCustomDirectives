CREATING CUSTOM DIRECTIVES


- building a input format directive.

- ng g d input-format   [syntax: ng g d directive-name]
    -> this will create 2 files input-format.directive.spec.ts and input-format.directive.ts
    -> also modifies app module(registers a directive)

-    (app.component.html)
    // <input type="text" appInputFormat [textformat]="'uppercase'">        then)
    <input type="text" [appInputFormat]="'uppercase'">

    (input-format.directive.ts)
    import { Directive, ElementRef, HostListener, Input } from '@angular/core';

    @Directive({
    selector: '[appInputFormat]'
    })
    export class InputFormatDirective {
    // @Input('textformat') format;                                     if)
        @Input('appInputFormat') format;
        constructor(private el: ElementRef) { }

        // @HostListener('focus') onFocus() {
        //   console.log('Input field focused');
        // }

        @HostListener('blur') onBlur() {
            // console.log('Input field blurred');
            let value: string = this.el.nativeElement.value;
            if(this.format === 'uppercase')
            this.el.nativeElement.value = value.toUpperCase();
            else
            this.el.nativeElement.value = value.toLowerCase();
        }
    }
    
    -> decorator function HostListener allows us to subscribe to the event raised from the
        DOM element. in other word, we will be able to know if user clicks inside the input field
        or outside the input field. 
        focus = inside input field
        blur = outside input field

    -> ElementRef is a service defined in angular that gives acces to DOM object. in simple word,
        if we type something in the input field, we will be able to access it.

    -> we've aliased the selector 'appInputFormat' as an input field to make code short and clean.
        we would've use a different alias name like if) line and then a then) line.